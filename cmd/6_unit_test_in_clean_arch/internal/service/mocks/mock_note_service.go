// Code generated for olezhek28 service
// Â© olezhek28 2024.
// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/olezhek28/code-base/6_unit_test_in_clean_arch/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NoteService is an autogenerated mock type for the NoteService type
type NoteService struct {
	mock.Mock
}

type NoteService_Expecter struct {
	mock *mock.Mock
}

func (_m *NoteService) EXPECT() *NoteService_Expecter {
	return &NoteService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, info
func (_m *NoteService) Create(ctx context.Context, info model.NoteInfo) (string, error) {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.NoteInfo) (string, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.NoteInfo) string); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.NoteInfo) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NoteService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - info model.NoteInfo
func (_e *NoteService_Expecter) Create(ctx interface{}, info interface{}) *NoteService_Create_Call {
	return &NoteService_Create_Call{Call: _e.mock.On("Create", ctx, info)}
}

func (_c *NoteService_Create_Call) Run(run func(ctx context.Context, info model.NoteInfo)) *NoteService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.NoteInfo))
	})
	return _c
}

func (_c *NoteService_Create_Call) Return(_a0 string, _a1 error) *NoteService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteService_Create_Call) RunAndReturn(run func(context.Context, model.NoteInfo) (string, error)) *NoteService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *NoteService) Get(ctx context.Context, uuid string) (model.Note, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Note, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Note); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(model.Note)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type NoteService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *NoteService_Expecter) Get(ctx interface{}, uuid interface{}) *NoteService_Get_Call {
	return &NoteService_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *NoteService_Get_Call) Run(run func(ctx context.Context, uuid string)) *NoteService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NoteService_Get_Call) Return(_a0 model.Note, _a1 error) *NoteService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteService_Get_Call) RunAndReturn(run func(context.Context, string) (model.Note, error)) *NoteService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewNoteService creates a new instance of NoteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteService {
	mock := &NoteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
